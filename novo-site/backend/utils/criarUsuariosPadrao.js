// utils/criarUsuariosPadrao.js
import User from '../models/User.js';
import bcrypt from 'bcryptjs';

// Array de objetos contendo os dados dos usu√°rios padr√£o a serem criados
const usuariosPadrao = [
  { usuario: 'admin', senha: 'admin123', permissoes: ['admin', 'financeiro', 'vendedor', 'rh', 'podeAcessarUsuarios'] },
  { usuario: 'financeiro', senha: 'fin@2025', permissoes: ['financeiro'] },
  { usuario: 'vendedor', senha: 'vend@4w', permissoes: ['vendas'] },
  { usuario: 'suporte', senha: 'suporte@4w', permissoes: ['suporte'] },
  { usuario: 'rh', senha: 'rh@2025', permissoes: ['rh'] },
  { usuario: 'auditor', senha: 'auditor@4w', permissoes: ['auditoria'] },
  { usuario: 'backoffice', senha: 'back@4w', permissoes: ['backoffice'] },
  { usuario: 'estagiario', senha: 'estag@4w', permissoes: ['leitura'] }
];

/**
 * Fun√ß√£o ass√≠ncrona para criar usu√°rios padr√£o no banco de dados, se eles ainda n√£o existirem.
 * Percorre a lista de `usuariosPadrao` e tenta criar cada um.
 * Se um usu√°rio j√° existir, um aviso √© exibido e a cria√ß√£o √© pulada.
 */
export async function criarUsuariosPadrao() {
  try {
    for (const { usuario, senha, permissoes } of usuariosPadrao) {
      // Verifica se o usu√°rio j√° existe no banco de dados
      const existente = await User.findOne({ usuario });
      if (existente) {
        console.log(`‚ö†Ô∏è Usu√°rio "${usuario}" j√° existe, pulando cria√ß√£o.`);
        continue; // Pula para o pr√≥ximo usu√°rio se j√° existir
      }
      console.log(`‚è≥ Tentando criar usu√°rio: ${usuario}`);
      // Cria uma nova inst√¢ncia do modelo User e salva no banco de dados
      const novo = new User({ usuario, senha, permissoes });
      await novo.save();
      console.log(`‚úÖ Usu√°rio "${usuario}" criado com sucesso.`);
    }

    console.log('üéâ Usu√°rios padr√£o criados com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rios padr√£o:', error);
  }
}
